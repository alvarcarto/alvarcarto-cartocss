scale: 1
metatile: 2
name: OpenStreetMap Carto
description: A general-purpose OpenStreetMap mapnik style, in CartoCSS
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
center:
  - 0
  - 0
  - 4
format: png
interactivity: false
minzoom: 0
maxzoom: 22
srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"

# Various parts to be included later on
_parts:
  # Extents are used for tilemill, and don't actually make it to the generated XML
  extents: &extents
    extent: *world
    srs-name: "900913"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
  extents84: &extents84
    extent: *world
    srs-name: "WGS84"
    srs: "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
  osm2pgsql: &osm2pgsql
    type: "postgis"
    dbname: "osm"
    host: "localhost"
    user: "osm"
    port: 5432
    password: "osm"
    key_field: ""
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"

Stylesheet:
  - style.mss
  - shapefiles.mss
  - water.mss
  - roads.mss
  - buildings.mss

Layer:

  #
  # Shape file styles
  # #################

  - id: world
    name: world
    geometry: polygon
    srs: "+init=epsg:3857"
    <<: *extents
    Datasource:
      file: data/simplified-land-polygons-complete-3857/simplified_land_polygons.shp
      type: shape
    properties:
      maxzoom: 9

  - id: coast-poly
    name: coast-poly
    geometry: polygon
    srs: "+init=epsg:3857"
    <<: *extents
    Datasource:
      file: data/land-polygons-split-3857/land_polygons.shp
      type: shape
    properties:
      minzoom: 10

  - id: builtup
    name: builtup
    geometry: polygon
    extent: *world
    srs-name: mercator
    srs: "+proj=merc +datum=WGS84 +over"
    Datasource:
      file: data/world_boundaries/builtup_area.shp
      type: shape
    properties:
      minzoom: 8
      maxzoom: 9

  - id: necountries
    name: necountries
    geometry: linestring
    <<: *extents84
    Datasource:
      file: data/ne_110m_admin_0_boundary_lines_land/ne_110m_admin_0_boundary_lines_land.shp
      type: shape
    properties:
      minzoom: 1
      maxzoom: 3

  - id: icesheet-poly
    name: icesheet-poly
    geometry: polygon
    <<: *extents
    Datasource:
      file: data/antarctica-icesheet-polygons-3857/icesheet_polygons.shp
      type: shape
    properties:
      minzoom: 4

  - id: icesheet-outlines
    name: icesheet-outlines
    geometry: linestring
    <<: *extents
    Datasource:
      file: data/antarctica-icesheet-outlines-3857/icesheet_outlines.shp
      type: shape
    properties:
      minzoom: 4

  #
  # Land cover
  # ##########

  - id: landcover-low-zoom
    name: landcover-low-zoom
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, name, way_pixels,
            COALESCE(wetland, landuse, "natural") AS feature
          FROM (SELECT
              way, COALESCE(name, '') AS name,
              ('landuse_' || (CASE WHEN landuse IN ('forest', 'military') THEN landuse ELSE NULL END)) AS landuse,
              ('natural_' || (CASE WHEN "natural" IN ('wood', 'sand', 'scree', 'shingle', 'bare_rock') THEN "natural" ELSE NULL END)) AS "natural",
              ('wetland_' || (CASE WHEN "natural" IN ('wetland', 'mud') THEN (CASE WHEN "natural" IN ('mud') THEN "natural" ELSE wetland END) ELSE NULL END)) AS wetland,
              way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels
            FROM planet_osm_polygon
            WHERE (landuse IN ('forest', 'military')
              OR "natural" IN ('wood', 'wetland', 'mud', 'sand', 'scree', 'shingle', 'bare_rock'))
              AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
              AND building IS NULL
            ORDER BY CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END, way_area DESC
          ) AS features
        ) AS landcover_low_zoom
    properties:
      minzoom: 7
      maxzoom: 9

  - id: water-lines-casing
    name: water-lines-casing
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, waterway, intermittent,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel
          FROM planet_osm_line
          WHERE waterway IN ('stream', 'drain', 'ditch')
        ) AS water_lines_casing
    properties:
      minzoom: 13

  - id: water-lines-low-zoom
    name: water-lines-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            intermittent
          FROM planet_osm_line
          WHERE waterway = 'river'
        ) AS water_lines_low_zoom
    properties:
      minzoom: 8
      maxzoom: 11

  - id: water-areas
    name: water-areas
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            "natural",
            waterway,
            landuse,
            name,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels
          FROM planet_osm_polygon
          WHERE
            (waterway IN ('dock', 'riverbank', 'canal')
              OR landuse IN ('reservoir', 'basin')
              OR "natural" IN ('water', 'glacier'))
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY z_order, way_area DESC
        ) AS water_areas
    properties:
      minzoom: 4

  - id: water-lines
    name: water-lines
    class: water-lines
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, waterway, name, intermittent,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
            'no' AS bridge
          FROM planet_osm_line
          WHERE waterway IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi')
            AND (bridge IS NULL OR bridge NOT IN ('yes', 'aqueduct'))
          ORDER BY z_order
        ) AS water_lines
    properties:
      minzoom: 12

  - id: water-barriers-line
    name: water-barriers-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            name
          FROM planet_osm_line
          WHERE waterway IN ('dam', 'weir', 'lock_gate')
        ) AS water_barriers_line
    properties:
      minzoom: 13

  - id: water-barriers-poly
    name: water-barriers-poly
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            name
          FROM planet_osm_polygon
          WHERE waterway IN ('dam', 'weir', 'lock_gate')
        ) AS water_barriers_poly
    properties:
      minzoom: 13

  - id: marinas-area
    name: marinas-area
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_polygon
          WHERE leisure = 'marina'
        ) AS marinas_area
    properties:
      minzoom: 14

  - id: piers-poly
    name: piers-poly
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, man_made
          FROM planet_osm_polygon
          WHERE man_made IN ('pier', 'breakwater', 'groyne')
        ) AS piers_poly
    properties:
      minzoom: 12

  - id: piers-line
    name: piers-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, man_made
          FROM planet_osm_line
          WHERE man_made IN ('pier', 'breakwater', 'groyne')
        ) AS piers_line
    properties:
      minzoom: 12
  - id: water-barriers-point
    name: water-barriers-point
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, waterway
          FROM planet_osm_point
          WHERE waterway IN ('dam', 'weir', 'lock_gate')
        ) AS water_barriers_points
    properties:
      minzoom: 17
  - id: bridge
    name: bridge
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels,
            man_made,
            name
          FROM planet_osm_polygon
          WHERE man_made = 'bridge'
        ) AS bridge
    properties:
      minzoom: 12
  - id: buildings
    name: buildings
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            building
          FROM planet_osm_polygon
          WHERE building IS NOT NULL
            AND building != 'no'
            AND (aeroway IS NULL OR aeroway != 'terminal')
            AND (amenity IS NULL OR amenity != 'place_of_worship')
            AND building != 'train_station'
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY z_order, way_area DESC
        ) AS buildings
    properties:
      minzoom: 14
  - id: buildings-major
    name: buildings-major
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            building,
            amenity,
            aeroway
          FROM planet_osm_polygon
          WHERE building IS NOT NULL
            AND building != 'no'
            AND (aeroway = 'terminal' OR amenity = 'place_of_worship' OR building = 'train_station')
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY z_order, way_area DESC)
        AS buildings_major
    properties:
      minzoom: 14
  - id: tunnels
    name: tunnels
    class: tunnels-fill tunnels-casing access
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      # This query is quite large, having to deal with both roads, railways and
      # runways. To allow for ways that are both railways and roads, a UNION
      # ALL is present, and to use an ordering different than current osm2pgsql
      # an order is generated in SQL.
      table: |-
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            access,
            construction,
            service,
            link,
            layernotnull
          FROM ( -- subselect that contains both roads and rail/aero
            SELECT
                way,
                ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
              WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')
                AND highway IS NOT NULL -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                'null',
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
              WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')
                AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select
            ) AS features
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('railway_rail', 440),
              ('railway_INT-preserved-ssy', 430),
              ('railway_INT-spur-siding-yard', 430),
              ('railway_subway', 420),
              ('railway_narrow_gauge', 420),
              ('railway_light_rail', 420),
              ('railway_preserved', 420),
              ('railway_funicular', 420),
              ('railway_monorail', 420),
              ('railway_miniature', 420),
              ('railway_turntable', 420),
              ('railway_tram', 410),
              ('railway_tram-service', 405),
              ('railway_disused', 400),
              ('railway_construction', 400),
              ('highway_motorway', 380),
              ('highway_trunk', 370),
              ('highway_primary', 360),
              ('highway_secondary', 350),
              ('highway_tertiary', 340),
              ('highway_residential', 330),
              ('highway_unclassified', 330),
              ('highway_road', 330),
              ('highway_living_street', 320),
              ('highway_pedestrian', 310),
              ('highway_raceway', 300),
              ('highway_motorway_link', 240),
              ('highway_trunk_link', 230),
              ('highway_primary_link', 220),
              ('highway_secondary_link', 210),
              ('highway_tertiary_link', 200),
              ('highway_service', 150),
              ('highway_track', 110),
              ('highway_path', 100),
              ('highway_footway', 100),
              ('highway_bridleway', 100),
              ('highway_cycleway', 100),
              ('highway_steps', 100),
              ('highway_platform', 90),
              ('railway_platform', 90),
              ('aeroway_runway', 60),
              ('aeroway_taxiway', 50),
              ('highway_construction', 10)
            ) AS ordertable (feature, prio)
            USING (feature)
          ORDER BY
            layernotnull,
            prio,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
        ) AS tunnels
    properties:
      group-by: layernotnull
      minzoom: 8
  - id: landuse-overlay
    name: landuse-overlay
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            landuse,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels
          FROM planet_osm_polygon
          WHERE landuse = 'military'
            AND building IS NULL
        ) AS landuse_overlay
    properties:
      minzoom: 7
  - id: line-barriers
    name: line-barriers
    class: barriers
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, COALESCE(historic, barrier) AS feature
          FROM (SELECT way,
            ('barrier_' || (CASE WHEN barrier IN ('chain', 'city_wall', 'embankment', 'ditch', 'fence', 'guard_rail',
                  'handrail', 'hedge', 'kerb', 'retaining_wall', 'wall') THEN barrier ELSE NULL END)) AS barrier,
            ('historic_' || (CASE WHEN historic = 'citywalls' THEN historic ELSE NULL END)) AS historic
            FROM planet_osm_line
            WHERE barrier IN ('chain', 'city_wall', 'embankment', 'ditch', 'fence', 'guard_rail',
                  'handrail', 'hedge', 'kerb', 'retaining_wall', 'wall')
              OR historic = 'citywalls'
              AND (waterway IS NULL OR waterway NOT IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi'))
          ) AS features
        ) AS line_barriers
    properties:
      minzoom: 14
  - id: cliffs
    name: cliffs
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, "natural", man_made
          FROM planet_osm_line
          WHERE "natural" = 'cliff' OR man_made = 'embankment'
        ) AS cliffs
    properties:
      minzoom: 13
  - id: area-barriers
    name: area-barriers
    class: barriers
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, barrier AS feature
          FROM (SELECT way,
            ('barrier_' || barrier) AS barrier
            FROM planet_osm_polygon
            WHERE barrier IS NOT NULL
          ) AS features
        ) AS area_barriers
    properties:
      minzoom: 16
  - id: ferry-routes
    name: ferry-routes
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE route = 'ferry'
        ) AS ferry_routes
    properties:
      minzoom: 8
  - id: turning-circle-casing
    name: turning-circle-casing
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT DISTINCT ON (p.way)
            p.way AS way, l.highway AS int_tc_type,
            CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway')
              THEN 'INT-minor'::text
              ELSE 'INT-normal'::text
            END AS int_tc_service
          FROM planet_osm_point p
            JOIN planet_osm_line l ON ST_DWithin(p.way, l.way, 0.1) -- Assumes Mercator
            JOIN (VALUES
              ('tertiary', 1),
              ('unclassified', 2),
              ('residential', 3),
              ('living_street', 4),
              ('service', 5)
              ) AS v (highway, prio)
              ON v.highway=l.highway
          WHERE p.highway = 'turning_circle'
            OR p.highway = 'turning_loop'
          ORDER BY p.way, v.prio
        ) AS turning_circle_casing
    properties:
      minzoom: 15
  - id: highway-area-casing
    name: highway-area-casing
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE((
              'highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'track', 'path', 'platform') THEN highway ELSE NULL END)),
              ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END))
            ) AS feature
          FROM planet_osm_polygon
          WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'track', 'path', 'platform')
            OR railway IN ('platform')
          ORDER BY z_order, way_area DESC
        ) AS highway_area_casing
    properties:
      minzoom: 14
  - id: highway-area-fill
    name: highway-area-fill
    # FIXME: No geometry?
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              ('highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street',
                                                    'track', 'path', 'platform', 'services') THEN highway ELSE NULL END)),
              ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END)),
              (('aeroway_' || CASE WHEN aeroway IN ('runway', 'taxiway', 'helipad') THEN aeroway ELSE NULL END))
            ) AS feature
          FROM planet_osm_polygon
          WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'living_street', 'track', 'path', 'platform', 'services')
            OR railway IN ('platform')
            OR aeroway IN ('runway', 'taxiway', 'helipad')
          ORDER BY z_order, way_area desc
        ) AS highway_area_fill
    properties:
      minzoom: 14
  - id: roads-fill
    name: roads-fill
    class: roads-fill access
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      # This is one of the most complex layers, so it bears explaining in some detail
      # It is necessary to
      # - Have roads and railways in the same layer to get ordering right
      # - Return two linestrings for ways which are both a road and railway
      # - Compute z_order here, rather than rely on osm2pgsql z_order
      table: |-
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            access,
            construction,
            service,
            link,
            layernotnull
          FROM ( -- begin "features" subselect that contains both roads and rail/aero
            SELECT
                way,
                ('highway_' || highway) AS feature, -- only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
                AND highway IS NOT NULL -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                'null' AS surface, -- Should be a SQL NULL?
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
                AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select
            ) AS features
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('railway_rail', 440),
              ('railway_INT-preserved-ssy', 430),
              ('railway_INT-spur-siding-yard', 430),
              ('railway_subway', 420),
              ('railway_narrow_gauge', 420),
              ('railway_light_rail', 420),
              ('railway_preserved', 420),
              ('railway_funicular', 420),
              ('railway_monorail', 420),
              ('railway_miniature', 420),
              ('railway_turntable', 420),
              ('railway_tram', 410),
              ('railway_tram-service', 405),
              ('railway_disused', 400),
              ('railway_construction', 400),
              ('highway_motorway', 380),
              ('highway_trunk', 370),
              ('highway_primary', 360),
              ('highway_secondary', 350),
              ('highway_tertiary', 340),
              ('highway_residential', 330),
              ('highway_unclassified', 330),
              ('highway_road', 330),
              ('highway_living_street', 320),
              ('highway_pedestrian', 310),
              ('highway_raceway', 300),
              ('highway_motorway_link', 240),
              ('highway_trunk_link', 230),
              ('highway_primary_link', 220),
              ('highway_secondary_link', 210),
              ('highway_tertiary_link', 200),
              ('highway_service', 150),
              ('highway_track', 110),
              ('highway_path', 100),
              ('highway_footway', 100),
              ('highway_bridleway', 100),
              ('highway_cycleway', 100),
              ('highway_steps', 100),
              ('highway_platform', 90),
              ('railway_platform', 90),
              ('aeroway_runway', 60),
              ('aeroway_taxiway', 50),
              ('highway_construction', 10)
            ) AS ordertable (feature, prio)
            USING (feature)
          ORDER BY
            layernotnull,
            prio,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
        ) AS roads_fill
    properties:
      minzoom: 8

  - id: roads-low-zoom
    class: roads-low-zoom
    name: roads-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              ('highway_' || (CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway end)),
              ('railway_' || (CASE WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                                   WHEN railway IN ('rail', 'tram', 'light_rail', 'funicular', 'narrow_gauge') THEN railway ELSE NULL END))
            ) AS feature,
            CASE WHEN tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes' THEN 'yes' ELSE 'no' END AS int_tunnel,
            CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes' ELSE 'no' END AS link,
            CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                  'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
              WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                  'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
              ELSE NULL
            END AS int_surface
          FROM planet_osm_roads
          WHERE highway IS NOT NULL
            OR (railway IS NOT NULL AND railway != 'preserved'
              AND (service IS NULL OR service NOT IN ('spur', 'siding', 'yard')))
          ORDER BY z_order
        ) AS roads_low_zoom
    properties:
      minzoom: 4
      maxzoom: 8

  - id: turning-circle-fill
    name: turning-circle-fill
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            DISTINCT on (p.way)
            p.way AS way, l.highway AS int_tc_type,
            CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
              ELSE 'INT-normal'::text END AS int_tc_service
          FROM planet_osm_point p
            JOIN planet_osm_line l
              ON ST_DWithin(p.way, l.way, 0.1)
            JOIN (VALUES
              ('tertiary', 1),
              ('unclassified', 2),
              ('residential', 3),
              ('living_street', 4),
              ('service', 5),
              ('track', 6)
            ) AS v (highway, prio)
              ON v.highway=l.highway
          WHERE p.highway = 'turning_circle' OR p.highway = 'turning_loop'
          ORDER BY p.way, v.prio
        ) AS turning_circle_fill
    properties:
      minzoom: 15

  - id: waterway-bridges
    name: waterway-bridges
    class: water-lines
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            name,
            intermittent,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
            'yes' AS bridge
          FROM planet_osm_line
          WHERE waterway IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi')
            AND bridge IN ('yes', 'aqueduct')
          ORDER BY z_order
        ) AS waterway_bridges
    properties:
      minzoom: 15
  - id: bridges
    name: bridges
    class: bridges-fill bridges-casing access
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            access,
            construction,
            service,
            link,
            layernotnull
          FROM ( -- subselect that contains both roads and rail/aero
            SELECT
                way,
                ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
              WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
                AND highway IS NOT NULL -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                'null',
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
              WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
                AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select
            ) AS features
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('railway_rail', 440),
              ('railway_INT-preserved-ssy', 430),
              ('railway_INT-spur-siding-yard', 430),
              ('railway_subway', 420),
              ('railway_narrow_gauge', 420),
              ('railway_light_rail', 420),
              ('railway_preserved', 420),
              ('railway_funicular', 420),
              ('railway_monorail', 420),
              ('railway_miniature', 420),
              ('railway_turntable', 420),
              ('railway_tram', 410),
              ('railway_tram-service', 405),
              ('railway_disused', 400),
              ('railway_construction', 400),
              ('highway_motorway', 380),
              ('highway_trunk', 370),
              ('highway_primary', 360),
              ('highway_secondary', 350),
              ('highway_tertiary', 340),
              ('highway_residential', 330),
              ('highway_unclassified', 330),
              ('highway_road', 330),
              ('highway_living_street', 320),
              ('highway_pedestrian', 310),
              ('highway_raceway', 300),
              ('highway_motorway_link', 240),
              ('highway_trunk_link', 230),
              ('highway_primary_link', 220),
              ('highway_secondary_link', 210),
              ('highway_tertiary_link', 200),
              ('highway_service', 150),
              ('highway_track', 110),
              ('highway_path', 100),
              ('highway_footway', 100),
              ('highway_bridleway', 100),
              ('highway_cycleway', 100),
              ('highway_steps', 100),
              ('highway_platform', 90),
              ('railway_platform', 90),
              ('aeroway_runway', 60),
              ('aeroway_taxiway', 50),
              ('highway_construction', 10)
            ) AS ordertable (feature, prio)
            USING (feature)
          ORDER BY
            layernotnull,
            prio,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
        ) AS bridges
    properties:
      group-by: layernotnull
      minzoom: 8
  - id: guideways
    name: guideways
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE highway = 'bus_guideway'
        ) AS guideways
    properties:
      minzoom: 13
  - id: admin-low-zoom
    name: admin-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            admin_level
          FROM planet_osm_roads
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4')
            AND osm_id < 0
          ORDER BY admin_level DESC
        ) AS admin_low_zoom
    properties:
      minzoom: 4
      maxzoom: 10
  - id: admin-mid-zoom
    name: admin-mid-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            admin_level
          FROM planet_osm_roads
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8')
            AND osm_id < 0
          ORDER BY admin_level DESC
        ) AS admin_mid_zoom
    properties:
      minzoom: 11
      maxzoom: 12
  - id: admin-high-zoom
    name: admin-high-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            admin_level
          FROM planet_osm_roads
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')
            AND osm_id < 0
          ORDER BY admin_level::integer DESC -- With 10 as a valid value, we need to do a numeric ordering, not a text ordering
        ) AS admin_high_zoom
    properties:
      minzoom: 13
  - id: power-minorline
    name: power-minorline
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE power = 'minor_line'
        ) AS power_minorline
    properties:
      minzoom: 16
  - id: power-line
    name: power-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE power = 'line'
        ) AS power_line
    properties:
      minzoom: 14
  - id: nature-reserve-boundaries
    name: nature-reserve-boundaries
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            boundary,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels
          FROM planet_osm_polygon
          WHERE (boundary = 'national_park' OR leisure = 'nature_reserve')
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
        ) AS national_park_boundaries
    properties:
      minzoom: 7
  - id: tourism-boundary
    name: tourism-boundary
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels,
            name,
            tourism
          FROM planet_osm_polygon
          WHERE tourism = 'theme_park'
            OR tourism = 'zoo'
        ) AS tourism_boundary
    properties:
      minzoom: 10
  - id: trees
    name: trees
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, "natural"
          FROM planet_osm_point
          WHERE "natural" = 'tree'
        UNION ALL
        SELECT
            way, "natural"
          FROM planet_osm_line
          WHERE "natural" = 'tree_row'
        ) AS trees
    properties:
      minzoom: 16
  - id: country-names
    name: country-names
    class: country
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels,
            name
          FROM planet_osm_polygon
          WHERE boundary = 'administrative'
            AND admin_level = '2'
            AND name IS NOT NULL
            AND way_area > 100*!pixel_width!::real*!pixel_height!::real
          ORDER BY way_area DESC
        ) AS country_names
    properties:
      minzoom: 2
  - id: capital-names
    name: capital-names
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            CASE
              WHEN (population ~ '^[0-9]{1,8}$') THEN population::INTEGER ELSE 0
            END as population,
            round(ascii(md5(osm_id::text)) / 55) AS dir -- base direction factor on geometry to be consistent across metatiles
          FROM planet_osm_point
          WHERE place IN ('city', 'town', 'village', 'hamlet')
            AND name IS NOT NULL
            AND capital = 'yes'
          ORDER BY population DESC
        ) AS capital_names
    properties:
      minzoom: 3
      maxzoom: 15
  - id: stations
    class: stations
    name: stations
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            ref,
            railway,
            aerialway,
            CASE railway
              WHEN 'station' THEN 1
              WHEN 'subway_entrance' THEN 3
              ELSE 2
            END
              AS prio
          FROM planet_osm_point
          WHERE railway IN ('station', 'halt', 'tram_stop', 'subway_entrance')
            OR aerialway = 'station'
          ORDER BY prio
        ) AS stations
    properties:
      minzoom: 12
  - id: stations-poly
    name: stations-poly
    class: stations
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            ref,
            railway,
            aerialway
        FROM planet_osm_polygon
        WHERE railway IN ('station', 'halt', 'tram_stop')
          OR aerialway = 'station'
        ) AS stations_poly
    properties:
      minzoom: 12
  - id: amenity-points-poly
    name: amenity-points-poly
    class: points
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house',
                                                  'hostel', 'hotel', 'motel', 'information', 'museum', 'picnic_site') THEN tourism ELSE NULL END,
              'amenity_' || CASE WHEN amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe',
                                                  'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre', 'fire_station', 'fountain',
                                                  'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', 'townhall', 'parking',
                                                  'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 'dentist', 'place_of_worship',
                                                  'police', 'post_box', 'post_office', 'pub', 'biergarten', 'recycling', 'restaurant', 'food_court',
                                                  'fast_food', 'telephone', 'emergency_phone', 'taxi', 'theatre', 'toilets', 'drinking_water',
                                                  'prison', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',
                                                  'charging_station') THEN amenity ELSE NULL END,
              'shop_' || CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'books', 'butcher', 'clothes', 'computer',
                                            'confectionery', 'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist',
                                            'garden_centre', 'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet',
                                            'photo', 'photo_studio', 'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk',
                                            'mobile_phone', 'motorcycle', 'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery',
                                            'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery',
                                            'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor',
                                            'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea', 'coffee') THEN shop
                              WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE 'other' END,
              'leisure_' || CASE WHEN leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table') THEN leisure ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'obelisk') THEN man_made ELSE NULL END,
              'natural_' || CASE WHEN "natural" IN ('spring') THEN "natural" ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site') THEN historic ELSE NULL END,
              'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals') THEN highway ELSE NULL END,
              'power_' || CASE WHEN power IN ('generator') THEN power ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('viewpoint') THEN tourism ELSE NULL END
            ) AS feature,
            access,
            religion,
            denomination,
            "generator:source",
            power_source,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels
          FROM planet_osm_polygon
          -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
          WHERE aeroway IN ('helipad', 'aerodrome')
            OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'hostel',
                           'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site')
            OR amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe',
                           'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre',
                           'fire_station', 'fountain', 'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse',
                           'townhall', 'parking', 'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors',
                           'dentist', 'place_of_worship', 'police', 'post_box', 'post_office', 'pub', 'biergarten',
                           'recycling', 'restaurant', 'food_court', 'fast_food', 'telephone', 'emergency_phone', 'taxi',
                           'theatre', 'toilets', 'drinking_water', 'prison', 'hunting_stand', 'nightclub', 'veterinary',
                           'social_facility', 'charging_station')
            OR shop IS NOT NULL -- skip checking a huge list and use a null check
            OR leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table')
            OR man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'obelisk')
            OR "natural" IN ('spring')
            OR historic IN ('memorial', 'monument', 'archaeological_site')
            OR highway IN ('bus_stop', 'elevator', 'traffic_signals')
            OR (power = 'generator' AND ("generator:source" = 'wind' OR power_source = 'wind'))
          ORDER BY way_area desc
        ) AS amenity_points_poly
    properties:
      minzoom: 10
  - id: amenity-points
    name: amenity-points
    class: points
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'hostel',
                                                  'hotel', 'motel', 'information', 'museum', 'picnic_site') THEN tourism ELSE NULL END,
              'amenity_' || CASE WHEN amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe',
                                                  'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre', 'fire_station', 'fountain',
                                                  'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', 'townhall', 'parking',
                                                  'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 'dentist', 'place_of_worship',
                                                  'police', 'post_box', 'post_office', 'pub', 'biergarten', 'recycling', 'restaurant', 'food_court',
                                                  'fast_food', 'telephone', 'emergency_phone', 'taxi', 'theatre', 'toilets', 'drinking_water',
                                                  'prison', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',
                                                  'charging_station') THEN amenity ELSE NULL END,
              'shop_' || CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'books', 'butcher', 'clothes', 'computer', 'confectionery',
                                            'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist', 'garden_centre',
                                            'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet', 'photo', 'photo_studio',
                                            'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk', 'mobile_phone', 'motorcycle',
                                            'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery', 'electronics', 'chemist', 'toys',
                                            'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery', 'laundry', 'dry_cleaning', 'beverages',
                                            'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor', 'copyshop', 'sports', 'deli', 'tobacco', 'art',
                                            'tea', 'coffee') THEN shop
                              WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE 'other' END,
              'leisure_' || CASE WHEN leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table', 'slipway',
                                                  'dog_park') THEN leisure ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'obelisk') THEN man_made ELSE NULL END,
              'natural_' || CASE WHEN "natural" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance') THEN "natural" ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site') THEN historic ELSE NULL END,
              'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals', 'ford') THEN highway ELSE NULL END,
              'power_' || CASE WHEN power IN ('generator') THEN power ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('viewpoint') THEN tourism ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('wayside_cross') THEN historic ELSE NULL END
            ) AS feature,
            access,
            CASE
              WHEN "natural" IN ('peak', 'volcano', 'saddle') THEN
                CASE
                  WHEN ele ~ '^-?\d{1,4}(\.\d+)?$' THEN ele::NUMERIC
                  ELSE NULL
                END
              ELSE NULL
            END AS score,
            religion,
            denomination,
            "generator:source",
            power_source,
            NULL AS way_pixels
          FROM planet_osm_point
          -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
          WHERE aeroway IN ('helipad', 'aerodrome')
            OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'hostel',
                           'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site')
            OR amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe',
                           'car_rental',  'car_wash', 'cinema', 'clinic', 'community_centre',
                           'fire_station', 'fountain', 'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse',
                           'townhall', 'parking', 'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors',
                           'dentist', 'place_of_worship', 'police', 'post_box', 'post_office', 'pub', 'biergarten',
                           'recycling', 'restaurant', 'food_court', 'fast_food', 'telephone', 'emergency_phone',
                           'taxi', 'theatre', 'toilets', 'drinking_water', 'prison', 'hunting_stand', 'nightclub',
                           'veterinary', 'social_facility', 'charging_station')
            OR shop IS NOT NULL -- skip checking a huge list and use a null check
            OR leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table', 'slipway',
                           'dog_park')
            OR man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'cross', 'obelisk')
            OR "natural" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance')
            OR historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross')
            OR highway IN ('bus_stop', 'elevator', 'traffic_signals', 'ford')
            OR (power = 'generator' AND ("generator:source" = 'wind' OR power_source = 'wind'))
          ORDER BY score DESC NULLS LAST
          ) AS amenity_points
    properties:
      minzoom: 10

  - id: junctions
    name: junctions
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            junction,
            ref,
            name
          FROM planet_osm_point
          WHERE highway = 'motorway_junction' OR highway = 'traffic_signals' OR junction = 'yes'
        ) AS junctions
    properties:
      minzoom: 11

  - id: interpolation
    name: interpolation
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE "addr:interpolation" IS NOT NULL
        ) AS interpolation
    properties:
      minzoom: 17

  - id: amenity-low-priority
    name: amenity-low-priority
    class: amenity-low-priority
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              'highway_' || CASE WHEN highway IN ('mini_roundabout') THEN highway ELSE NULL END,
              'railway_' || CASE WHEN railway IN ('level_crossing', 'crossing') THEN railway ELSE NULL END,
              'amenity_' || CASE WHEN amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'bench', 'waste_basket') THEN amenity ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('wayside_cross') THEN historic ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,
              'barrier_' || CASE WHEN barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block') THEN barrier ELSE NULL END
            )  AS feature,
            access,
            CASE WHEN amenity='waste_basket' THEN 2 ELSE 1 END AS prio
          FROM planet_osm_point p
          WHERE highway IN ('mini_roundabout')
             OR railway IN ('level_crossing', 'crossing')
             OR amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'bench', 'waste_basket')
             OR historic IN ('wayside_cross')
             OR man_made IN ('cross')
             OR barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block')
          ORDER BY prio
          ) AS amenity_low_priority
    properties:
      minzoom: 14
  - id: amenity-low-priority-poly
    name: amenity-low-priority-poly
    class: amenity-low-priority
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              'amenity_' || CASE WHEN amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking') THEN amenity ELSE NULL END,
              'barrier_' || CASE WHEN barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block') THEN barrier ELSE NULL END
            )  AS feature,
            access
          FROM planet_osm_polygon p
          WHERE amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking')
             OR barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block')
          ) AS amenity_low_priority_poly
    properties:
      minzoom: 14
